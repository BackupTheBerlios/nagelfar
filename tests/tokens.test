#------------------------------------------------------------*- tcl -*-
# Tests for syntax database tokens
#----------------------------------------------------------------------
# $Revision$
#----------------------------------------------------------------------

test tokens-1.1 {
    Modifier ?
} -body {
    createTestFile {
        set apa x
        ##nagelfar syntax gurka o? x?
        ##nagelfar option gurka -flag -wiggle
        gurka
        gurka hej
        gurka $apa
        gurka -flag hopp
    }
    execTestFile
} -result {%%}

test tokens-1.2 {
    Modifier ?
} -body {
    createTestFile {
        ##nagelfar syntax gurka o? x
        ##nagelfar option gurka -flag -wiggle
        gurka -flag -wiggle hopp
    }
    execTestFile
} -result {%%Line   4: E Wrong number of arguments (3) to "gurka"}

test tokens-2.1 {
    Token p*
} -body {
    createTestFile {
        ##nagelfar syntax gurka p*
        ##nagelfar option gurka -flag -miffo
        gurka
        gurka -flag 1
        gurka -miffo 0 -flag hejsan
        # FIXA?
        # This should preferably give a bad option rather than wrong # args.
        gurka -miffo 1 hejsan
    }
    execTestFile
} -result {%%Line   9: E Wrong number of arguments (3) to "gurka"}

test tokens-3.1 {
    Modifier .
} -body {
    # Test that comparison with previous syntax works
    createTestFile {
        ##nagelfar syntax apa n x x. x.
        proc apa {mName arg1 {arg2 0} {arg3 0}} {
            upvar $mName m
            
            set m 1
        }
    }
    execTestFile
} -result {%%}

test tokens-4.1 {
    Token error
} -body {
    createTestFile {
        ##nagelfar syntax gurka y*
        gurka x
    }
    execTestFile
} -result {%%Unsupported token y* in syntax for gurka*} -match glob

test tokens-4.2 {
    Token error
} -body {
    createTestFile {
        ##nagelfar syntax gurka 1:
        gurka x
    }
    execTestFile
} -result {%%Can't parse syntax definition for "gurka": "1:"}

test tokens-5.1 {
   Range tokens
} -body {
    createTestFile {
        ##nagelfar syntax gurka r 1 2
        gurka
        gurka hej
        gurka hej hopp
        gurka hej hopp apa
    }
    execTestFile
} -result {%%Line   3: E Wrong number of arguments (0) to "gurka"
Line   6: E Wrong number of arguments (3) to "gurka"}

test tokens-6.1 {
    Expression token
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x e? e E
        gurka hej {$apa} {$apa} {$apa}
        ##nagelfar syntax hopp x e e E
        hopp hej {$apa} {$apa} $apa
        hopp hej {$apa} $apa {$apa}
    }
    execTestFile -flags -Wexpr0
} -result {%%Modifier "?" is not supported for "e" in syntax for gurka.
Line   6: W No braces around expression in hopp statement.}

test tokens-6.2 {
    Expression token
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax hopp x e 
        hopp hej {$apa}
        hopp hej $apa
    }
    execTestFile -flags -Wexpr2
} -result {%%Line   5: W No braces around expression in hopp statement.}

test tokens-7.1 {
    Code token
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x c* c
        gurka hej {list $apa} [list hej hopp]
        ##nagelfar syntax hopp x c? c
        hopp hej $apa {list $apa}
    }
    execTestFile
} -result {%%Modifier "*" is not supported for "c" in syntax for gurka.
Line   6: W No braces around code in hopp statement.}

test tokens-8.1 {
    Subcommand token
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x s?
        gurka hej [list hej hopp]
        ##nagelfar syntax hopp x s
        ##nagelfar subcmd hopp qwerty hipp happ hopp
        hopp hej qwe
    }
    execTestFile
} -result {%%Modifier "?" is not supported for "s" in syntax for gurka.
Line   4: N Non static subcommand to "gurka"
Line   7: W Shortened subcommand for "hopp", qwe -> qwerty}

test tokens-9.1 {
    Optional tokens
} -body {
    createTestFile {
        # Here, -apa cannot be an option
        string match -apa gurka
        string equal -nocase -apa gurka

        ##nagelfar syntax hojj p* x x
        ##nagelfar option hojj -apa -bepa
        hojj -apa x -cepa y

        # The * should not eat the last arg
        ##nagelfar syntax myset n* x
        set apa 1
        myset hej hopp $apa
        list $hej $hopp
    }
    execTestFile
} -result {%%}

