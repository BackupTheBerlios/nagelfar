#------------------------------------------------------------*- tcl -*-
# Tests for syntax database tokens
#----------------------------------------------------------------------
# $Revision$
#----------------------------------------------------------------------

test tokens-1.1 {
    Modifier ?
} -body {
    createTestFile {
        set apa x
        ##nagelfar syntax gurka o? x?
        ##nagelfar option gurka -flag -wiggle
        gurka
        gurka hej
        gurka $apa
        gurka -flag hopp
    }
    execTestFile
} -result {%%}

test tokens-1.2 {
    Modifier ?
} -body {
    createTestFile {
        ##nagelfar syntax gurka o? x
        ##nagelfar option gurka -flag -wiggle
        gurka -flag -wiggle hopp
    }
    execTestFile
} -result {%%Line   4: E Wrong number of arguments (3) to "gurka"}

test tokens-2.1 {
    Token p*
} -body {
    createTestFile {
        ##nagelfar syntax gurka p*
        ##nagelfar option gurka -flag -miffo
        gurka
        gurka -flag 1
        gurka -miffo 0 -flag hejsan
        # FIXA?
        # This should preferably give a bad option rather than wrong # args.
        gurka -miffo 1 hejsan
    }
    execTestFile
} -result {%%Line   9: E Wrong number of arguments (3) to "gurka"}

test tokens-2.2 {
    Token p* and --
} -body {
    createTestFile {
        ##nagelfar syntax gurka p* x
        ##nagelfar option gurka -- -flag -miffo
        gurka x
        gurka -- x
        gurka -flag 1 x
        gurka -flag 1 -- x
        gurka -miffo 1 --
        gurka -miffu 1 x
    }
    execTestFile
} -result {%%Line   9: E Bad option -miffu to gurka}

test tokens-2.3 {
    Token p* and --
} -body {
    createTestFile {
        ##nagelfar syntax gurka p*
        ##nagelfar option gurka -- -flag -miffo
        gurka
        gurka --
        gurka -flag 1
        gurka -flag 1 --
        gurka -miffo 1 --
        gurka -miffu 1
    }
    execTestFile
} -result {%%Line   9: E Bad option -miffu to gurka}

test tokens-2.4 {
    Token p* and --
} -body {
    createTestFile {
        ##nagelfar subcmd+ string gurka
        ##nagelfar syntax string\ gurka p*
        ##nagelfar option string\ gurka -- -flag -miffo
        string gurka
        string gurka --
        string gurka -flag 1
        string gurka -flag 1 --
        string gurka -miffo 1 --
        string gurka -miffu 1
    }
    execTestFile
} -result {%%Line  10: E Bad option -miffu to string gurka}

test tokens-3.1 {
    Modifier .
} -body {
    # Test that comparison with previous syntax works
    createTestFile {
        ##nagelfar syntax apa n x x. x.
        proc apa {mName arg1 {arg2 0} {arg3 0}} {
            upvar $mName m
            
            set m 1
        }
    }
    execTestFile
} -result {%%}

test tokens-4.1 {
    Token error
} -body {
    createTestFile {
        ##nagelfar syntax gurka y*
        gurka x
    }
    execTestFile
} -result {%%Unsupported token y* in syntax for gurka*} -match glob

test tokens-4.2 {
    Token error
} -body {
    createTestFile {
        ##nagelfar syntax gurka 1:
        gurka x
    }
    execTestFile
} -result {%%Can't parse syntax definition for "gurka": "1:"}

test tokens-5.1 {
   Range tokens
} -body {
    createTestFile {
        ##nagelfar syntax gurka r 1 2
        gurka
        gurka hej
        gurka hej hopp
        gurka hej hopp apa
    }
    execTestFile
} -result {%%Line   3: E Wrong number of arguments (0) to "gurka"
Line   6: E Wrong number of arguments (3) to "gurka"}

test tokens-6.1 {
    Expression token
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x e? e E
        gurka hej {$apa} {$apa} {$apa}
        ##nagelfar syntax hopp x e e E
        hopp hej {$apa} {$apa} $apa
        hopp hej {$apa} $apa {$apa}
    }
    execTestFile -flags -Wexpr0
} -result {%%Modifier "?" is not supported for "e" in syntax for gurka.
Line   6: W No braces around expression in hopp statement.}

test tokens-6.2 {
    Expression token
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax hopp x e 
        hopp hej {$apa}
        hopp hej $apa
    }
    execTestFile -flags -Wexpr2
} -result {%%Line   5: W No braces around expression in hopp statement.}

test tokens-7.1 {
    Code token
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x c* c
        gurka hej {list $apa} [list hej hopp]
        ##nagelfar syntax hopp x c? c
        hopp hej $apa {list $apa}
    }
    execTestFile
} -result {%%Modifier "*" is not supported for "c" in syntax for gurka.
Line   6: W No braces around code in hopp statement.}

test tokens-7.2 {
    Code token, partial commands
} -body {
    createTestFile {
        # Test eggdrop bind style
        ##nagelfar syntax bind s x x c
        ##nagelfar subcmd bind load link sent
        ##nagelfar syntax bind\ load x x c1
        ##nagelfar syntax bind\ link x x c2
        ##nagelfar syntax bind\ sent x x c3
        bind load _ _ {llength}
        bind link _ _ {string index}
        bind sent _ _ {lrange}
        bind link _ _ {llength a;#}
        bind link _ _ {llength}
    }
    execTestFile
    # Known bug: Prefix errors give bad extra info
} -result {%%Line  12: E Wrong number of arguments (2) to "llength"
            Argument 2 at line 14}

test tokens-7.3 {
    Code token, partial commands
} -body {
    createTestFile {
        trace add variable ::x write "llength x ;#"
        trace add variable ::x write "lrange"
        trace add execution _ _ "string index"
        trace add command   _ _ "lrange"

        trace add execution _ _ "lrange"
        trace add command   _ _ "string index"
        trace add variable  ::x _ "string index"
    }
    execTestFile
    # Known bug: Prefix errors give bad extra info
} -result {%%Line   7: E Wrong number of arguments (2) to "lrange"
            Argument 2 at line 8
Line   8: E Wrong number of arguments (4) to "string index"
            Argument 3 at line 9
            Argument 4 at line 9
Line   9: E Wrong number of arguments (4) to "string index"
            Argument 3 at line 11
            Argument 4 at line 10}

test tokens-7.4 {
    Code token, global context
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x cg
        gurka hej {list $apa ; set bepa 1}
        set bepa
    }
    execTestFile
} -result {%%Line   4: E Unknown variable "apa"
Line   5: E Unknown variable "bepa"}

test tokens-7.5 {
    Code token, namespace context
} -body {
    createTestFile {
        proc ns::gurka::meee {x} {
            list a
        }
        ##nagelfar syntax ns::gurka x cn
        ns::gurka hej {meee x y}
    }
    execTestFile
} -result {%%Line   6: E Wrong number of arguments (2) to "ns::gurka::meee"}

test tokens-7.6 {
    Code token, local context
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x cl
        gurka hej {list $apa ; set bepa 1}
        set bepa
    }
    execTestFile
} -result {%%Line   4: E Unknown variable "apa"
Line   5: E Unknown variable "bepa"}

test tokens-7.7 {
    Code token, local context+var
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x cv
        gurka hej {x y} {
            list $apa $x $y
            set bepa 1
            set cepa 1
        }
        set bepa
    }
    execTestFile
} -result {%%Line   5: E Unknown variable "apa"
Line   9: E Unknown variable "bepa"}

test tokens-7.8 {
    Code token, local context+var
} -body {
    createTestFile {
        ##nagelfar syntax gurka x cv
        gurka hej {x {}y} {
        }
    }
    execTestFile
} -result {%%Line   3: E Argument list is not a valid list}

test tokens-8.1 {
    Subcommand token
} -body {
    createTestFile {
        set apa 1
        ##nagelfar syntax gurka x s?
        gurka hej [list hej hopp]
        ##nagelfar syntax hopp x s
        ##nagelfar subcmd hopp qwerty hipp happ hopp
        hopp hej qwe
    }
    execTestFile
} -result {%%Modifier "?" is not supported for "s" in syntax for gurka.
Line   4: N Non static subcommand to "gurka"
Line   7: W Shortened subcommand for "hopp", qwe -> qwerty}

test tokens-9.1 {
    Optional tokens
} -body {
    createTestFile {
        # Here, -apa cannot be an option
        string match -apa gurka
        string equal -nocase -apa gurka

        ##nagelfar syntax hojj p* x x
        ##nagelfar option hojj -apa -bepa
        hojj -apa x -cepa y

        # The * should not eat the last arg
        ##nagelfar syntax myset n* x
        set apa 1
        myset hej hopp $apa
        list $hej $hopp
    }
    execTestFile
} -result {%%}

