#------------------------------------------------------------*- tcl -*-
# Generic tests for Nagelfar
#----------------------------------------------------------------------
# $Revision$
#----------------------------------------------------------------------

test nagelfar-1.1 {
    Command line checks
} -body {
    createTestFile {
        set apa $bepa
    }
    execTestFile -fn _____
} -returnCodes 1 -result {Could not find file '_____'}

test nagelfar-1.2 {
    Command line checks
} -body {
    createTestFile {
        set apa $bepa
    }
    execTestFile -encoding gurkmeja
} -returnCodes 1 -result {*Bad encoding name: "gurkmeja"*} -match glob

test nagelfar-1.3 {
    Command line checks
} -body {
    createTestFile {
        set apa bepa
    }
    execTestFile -encoding ascii
} -returnCodes 0 -result {%%}

test nagelfar-1.4 {
    Command line checks
} -body {
    createTestFile {
        set apa bepa
    }
    execTestFile -flags -quiet
} -returnCodes 0 -result {}

test nagelfar-1.5 {
    Command line checks
} -body {
    createTestFile {
        set apa bepa
    }
    execTestFile -glob {_test*}
} -returnCodes 0 -result {%%Checking file _testfile_}


test nagelfar-2.1 {
    Basic functionality
} -body {
    createTestFile {
        set bepa 2
        set apa $bepa
        return -1
        return -code error -1
    }
    execTestFile
} -result {%%}

test nagelfar-2.2 {
    Basic functionality
} -body {
    createTestFile {
        set apa $bepa
    }
    execTestFile -filter *Unknown*
} -result {%%}

test nagelfar-2.3 {
    Basic functionality
} -body {
    createTestFile {
        proc apa {w} {
            variable Priv
            global Torv

            after cancel $Torv(afterId)
            puts $Priv(repeated)
            incr Priv(repeated)
        }
    }
    execTestFile
} -result {%%}

test nagelfar-2.4 {
    Basic functionality
} -body {
    createTestFile {
        # A test to just excersise parsing
        proc apa {w} {
            set apa 1
            set bepa(x) 1
            set ::cepa 3
            # Expression
            set apa [expr {[pid] + 1 + $apa}]
            set apa [expr {"a\nb\\c" eq " [pid] $apa "}]
            # Misc, empty script
            lindex $apa 0 ;;list [] [lindex $apa 1]
            # Variables
            list $apa ${apa} $bepa(x) ${bepa(x)} $bepa($apa) $::cepa ${}
            # Backslashes
            list apa\nbepa\\xy\tsdkj\$urga\[moos\]skj
            # Write more here
        }
    }
    execTestFile
} -result {%%}


test nagelfar-3.1 {
    Basic errors
} -body {
    createTestFile {
        set apa $bepa
    }
    execTestFile
} -result {%%Line   2: E Unknown variable "bepa"}

test nagelfar-3.2 {
    Basic errors
} -body {
    createTestFile {
        proc hej {a b c} {
        }
        set apa [hej a b]
    }
    execTestFile
} -result {%%Line   4: E Wrong number of arguments (2) to "hej"}

test nagelfar-3.3 {
    Basic errors
} -body {
    createTestFile {
        list apa [list a b [list a b]] a]
        list apa [list a b [list a b] a]]
    }
    execTestFile
} -result {%%Line   2: N Unescaped end bracket*Line   3: N Unescaped end bracket} -match glob

test nagelfar-3.4 {
    Basic errors
} -body {
    createTestFile {
        set apa bepa
        set cepa [set $apa]
    }
    execTestFile
} -result {%%Line   3: N Suspicious variable name "$apa"}

test nagelfar-3.5 {
    Basic errors
} -body {
    createTestFile {
        proc apa {w} {
            set Miffo(gurka) 1

            incr Miffo(hampa)
            incr Miffo(gurka)
        }
    }
    execTestFile
} -result {%%Line   5: E Unknown variable "Miffo(hampa)"}

test nagelfar-3.6 {
    Basic errors
} -body {
    createTestFile "
        proc hej {a b c} { }
        set apa \[hej a \\\n b]
    "
    execTestFile
} -result {%%Line   3: E Wrong number of arguments (2) to "hej"*Argument 2 at line 4} -match glob

test nagelfar-3.7 {
   Move this somewhere FIXA
} -body {
    createTestFile {
        proc apa {x} {
            if {[info exists y]} {
                list $y
            }
        }
    }
    execTestFile
} -result {%%}

test nagelfar-4.1 {
    Options checking
} -body {
    createTestFile {
        lsort -ascii -command xxx -decreasing -dictionary -increasing \
                -index 0 -integer -real -unique [list 1 2 3]
    }
    execTestFile
} -result {%%}

test nagelfar-4.2 {
    Options checking
} -body {
    createTestFile {
        lsort -d [list 1 2 3]
    }
    execTestFile
} -result {%%Line   2: E Ambigous option for "lsort", -d -> -decreasing/-dictionary}

test nagelfar-4.3 {
    Options checking
} -body {
    createTestFile {
        lsort -dictionary -index [list 1 2 3]
    }
    execTestFile
} -result {%%Line   2: E Wrong number of arguments (3) to "lsort"}

# This error gives a different message which I hope I can correct.
test nagelfar-4.4 {
    Options checking
} -constraints {
    knownbug
} -body {
    createTestFile {
        fconfigure xx -blocking 1 -encoding 0 -mode
    }
    execTestFile
} -result {*Missing value for last option*} -match glob

test nagelfar-4.5 {
    Options checking
} -body {
    createTestFile {
        # This should see that i is set
        string is integer -strict -failindex i 789
        puts $i
    }
    execTestFile
} -result {%%}

test nagelfar-4.6 {
    Options checking
} -body {
    createTestFile {
        # Here, -apa cannot be an option
        string match -apa gurka
    }
    execTestFile
} -result {%%}

test nagelfar-4.7 {
    Options checking
} -body {
    createTestFile {
        # There was a bug with glob chars in options
        string match -?* gurka burka
    }
    execTestFile
} -result {%%Line   3: E Bad option -?* to string match}

test nagelfar-4.8 {
    Options checking
} -body {
    createTestFile {
        # Shortening should not affect other checking
        string equal -length 2 apa bepa
        string equal -len    2 apa bepa
    }
    execTestFile
} -result {%%Line   4: W Shortened option for "string equal", -len -> -length}

test nagelfar-6.1 {
    Expression checking
} -body {
    createTestFile {
        expr {1 + ""}
    }
    execTestFile
} -result {%%Line   2: E Bad expression: can't use empty string as operand of "+"}

test nagelfar-6.2 {
    Expression checking
} -body {
    createTestFile {
        set apa 1
        expr {1 + $apa /}
    }
    execTestFile
} -result {%%Line   3: E Bad expression: premature end of expression}

test nagelfar-6.3 {
    Expression checking
} -body {
    createTestFile {
        set apa 10
        set bepa 5
        # This gave a divide by zero error in the first implementation
        expr {1 / ($apa - $bepa)}
    }
    execTestFile
} -result {%%}

test nagelfar-6.4 {
    Expression checking
} -body {
    createTestFile {
        set apa 10
        expr {$apa == {$bepa}}
    }
    execTestFile
} -result {%%}

test nagelfar-7.1 {
    Command: upvar
} -body {
    createTestFile {
        upvar 1 bepa
    }
    execTestFile
} -result {%%Line   2: E Wrong number of arguments (2) to "upvar"}

test nagelfar-7.2 {
    Command: upvar
} -body {
    createTestFile {
        set x hej
        upvar 1 bepa $x
    }
    execTestFile
} -result {%%Line   3: N Suspicious upvar variable "$x"}

test nagelfar-7.3 {
    Command: upvar
} -body {
    createTestFile {
        set x hej
        upvar $x $x bepa
    }
    execTestFile
} -result {%%Line   3: N Non constant level to upvar: "$x"}

test nagelfar-7.4 {
    Command: upvar
} -body {
    createTestFile {
        upvar bepa bepa
        llength $bepa
    }
    execTestFile
} -result {%%}

test nagelfar-8.1 {
    Variable handling
} -constraints knownbug -body {
    createTestFile {
        proc hej {x y} {
            global item
            list item($x,$y)
        }
    }
    execTestFile
} -result {should detect missing dollar}

test nagelfar-8.2 {
    Variable handling, -novar flag
} -body {
    createTestFile {
        proc hej {x y} {
            set apa bepa
            set cepa apa
        }
    }
    execTestFile -flags -novar
} -result {%%}

test nagelfar-9.1 {
    if statement, as comment
} -body {
    createTestFile {
        if 0 {
            set y $x
        }
        expr {$y}
    }
    execTestFile
} -result {%%Line   5: E Unknown variable "y"}

test nagelfar-9.2 {
    if statement, as comment
} -body {
    createTestFile {
        if 0 then {
            set y $x
        }
        expr {$y}
    }
    execTestFile
} -result {%%Line   5: E Unknown variable "y"}

test nagelfar-10.1 {
    Brace alignment
} -constraints {
    knownbug
} -body {
    createTestFile "
        cmd xx yy \\
            apa {
               hejsan
            }
    "
    execTestFile
} -result {%%}

test nagelfar-10.2 {
    Brace alignment
} -body {
    createTestFile {
        list xx yy {
            hejsan
         }
    }
    execTestFile
} -result {%%Line   4: N Close brace not aligned with line 2 (8 9)}

test nagelfar-11.1 {
    Line numbers
} -body {
    createTestFile "
        list xx yy \\
                zz \$y
        set apa \$bepa
        if 1 {
            list xx yy \\
                    zz \\
                    zz \\
                    zz \\
                    \$x
        }
    "
    execTestFile
} -result {^%%Line\s+3:.*Line\s+4:.*Line\s+10:} -match regexp

test nagelfar-11.2 {
    Line numbers, line 1
} -body {
    createTestFile {apa bepa
    }
    execTestFile
} -result {%%Line   1: W Unknown command "apa"}

test nagelfar-12.1 {
    Comments, bad in switch
} -body {
    createTestFile {
        switch apa {
            hej {
                set x 1
            }
            # A bad comment
            hopp {
                set y 1
            }
        }
    }
    execTestFile
} -result "%%Line   6: W Switch pattern starting with #. This could be a bad comment.*" -match glob

test nagelfar-12.2 {
    Comments, bad in list
} -body {
    createTestFile {
        array set apa {
            elem1 val1
            # A bad comment
            elem2 val2
        }
    }
    execTestFile
} -result "%%Line   4: N Suspicious \# char. Possibly a bad comment."

test nagelfar-12.3 {
    Comments, bad in list
} -body {
    createTestFile {
        miffo apa {
            elem1 val1
            # A bad comment
            elem2 val2
        }
        proc miffo {a b} {}
    }
    execTestFile -flags -2pass
} -result "%%Line   4: N Suspicious \# char. Possibly a bad comment."

test nagelfar-12.4 {
    Comments, should not complain too much
} -body {
    createTestFile {
        if {[catch {
            set apa bepa
            # An ok comment
            set apa bepa
        }]} {
            # An ok comment
        }
        if 0 {
            set apa bepa
            # An ok comment
            set apa bepa
        }
    }
    execTestFile
} -result "%%"

test nagelfar-13.1 {
    Syntax database, multiple ?
} -body {
    createTestFile {
        array set hej {1 2}
        array names hej
        array names hej *a*
        array names hej -regexp *a*
    }
    execTestFile
} -result {%%}

test nagelfar-13.2 {
    Syntax database, v token
} -body {
    createTestFile "
        ##nagelfar syntax Miffo v

        set apa \[Miffo \\
                hej\]
    "
    execTestFile
} -result "%%Line   5: E Unknown variable \"hej\""

test nagelfar-13.3 {
    Syntax database, n token
} -body {
    createTestFile "
        ##nagelfar syntax Miffo n
        set hej 1
        set apa \[Miffo \\
                \$hej\]
    "
    execTestFile
} -result "%%Line   5: N Suspicious variable name \"\$hej\""


# Testing the after command which has the special thing
# of accepting either an int or a subcommand as first argument.
test nagelfar-17.1 {
    Command: after
} -body {
    createTestFile { # FIXA: Implement and test this properly
        after 10
        after 20 {set apa 5}
        set id [after 30 set apa 5]
        after cancel $id
        after cancel set apa 5
        after idle {set apa 5}
        after idle set apa 5
        after info $id
    }
    execTestFile
} -result {%%}


test nagelfar-18.1 {
    Command: subcommands
} -body {
    # Proper detection of subcommands should tell the test that
    # apa is a variable name.
    createTestFile {
        set apa 1
        trace variable apa w Hej
        trace add variable apa write Hej
    }
    execTestFile
} -result {%%}

test nagelfar-19.1 {
    interp alias, aliases ambiguity
} -body {
    createTestFile {
        interp aliases
        interp alia
    }
    execTestFile
} -result {%%Line   3: E Ambigous subcommand for "interp", alia -> alias/aliases}

test nagelfar-19.2 {
    interp alias, recognise
} -body {
    createTestFile {
        interp alias {} lfilter {} lsearch -all -inline
        set apa [list hej hopp]
        lfilter $apa h*
    }
    execTestFile
} -result {%%}

test nagelfar-19.3 {
    interp alias, track
} -body {
    createTestFile {
        interp alias {} lfilter {} lsearch -all -inline
        set apa [list hej hopp]
        lfilter -miffo $apa h*
    }
    execTestFile
} -result {%%Line   4: E Bad option -miffo to lsearch}

test nagelfar-19.4 {
    interp alias, track
} -body {
    createTestFile {
        interp alias {} strncmp {} string match -nocase
        set apa "hej hopp"
        strncmp h* $apa
        strncmp -nocase h* $apa
    }
    execTestFile
} -result {%%Line   5: E Wrong number of arguments (5) to "string match"}

test nagelfar-19.5 {
    interp alias, track
} -body {
    createTestFile {
        interp alias {} strncmp {} string match -nocasd
        set apa "hej hopp"
        strncmp h* $apa
    }
    execTestFile
} -result {%%Line   4: E Bad option -nocasd to string match}
