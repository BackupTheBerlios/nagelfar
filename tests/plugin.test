#------------------------------------------------------------*- tcl -*-
# Tests for plugins in Nagelfar
#----------------------------------------------------------------------

test plugin-1.1 {
    Command line checks
} -body {
    createTestFile {
        # Not a valid plugin
    } 2
    createTestFile {
        set apa $bepa
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -returnCodes 1 -result {Bad plugin: _testfile_.plugin.tcl
No plugins found.}

test plugin-1.2 {
    Command line checks
} -body {
    createTestFile {##Nagelfar Plugin : Some info

    } 2
    createTestFile {
        set apa $bepa
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   2: E Unknown variable "bepa"}

test plugin-1.3 {
    Command line checks
} -body {
    createTestFile {##Nagelfar Plugin : Some info

    } 2
    createTestFile {
        set apa $bepa
    }

    execTestFile -plugin _testfile_.plugin2.tcl
} -returnCodes 1 -result {Bad plugin: _testfile_.plugin2.tcl
Available plugins:
Plugin "_testfile_.plugin" :  Some info}

test plugin-1.4 {
    Command line checks
} -body {
    createTestFile {##Nagelfar Plugin : Some info

    } 2
    createTestFile {
        set apa $bepa
    }

    execTestFile -flags -pluginlist
} -result {Available plugins:
Plugin "_testfile_.plugin" :  Some info}

test plugin-2.1 {
    Plugin for late expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc lateExpr {exp info} {
            # Any expression with an "a" in it post-substitution is ignored
            if {[string match *a* $exp]} {
                return [list replace "1"]
            }
            return ""
        }
    } 2
    createTestFile {
        set apa [expr {1 b 1}]
        set apa [expr {1 a 1}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   2: E Bad expression: invalid bareword "b"*} -match glob

test plugin-2.2 {
    Plugin for late expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc lateExpr {exp info} {
            # Any expression with an "eq" in it post-substitution is an error
            if {[string match "* eq *" $exp]} {
                return [list error "Operator \"eq\" is forbidden here"]
            }
            return ""
        }
    } 2
    createTestFile {
        set apa [expr {1 ne 1}]
        set apa [expr {1 eq 1}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   3: E Operator "eq" is forbidden here}

test plugin-2.3 {
    Plugin for late expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc lateExpr {exp info} {
            # Allow application defined operators
            set exp [string map {{ my_cool_bin_op } { eq }} $exp]
            return [list replace $exp]
        }
    } 2
    createTestFile {
        set apa [expr {1 my_cool_bin_op 1}]
        set apa [expr {1 my_noncool_bin_op 1}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -match glob -result {%%Line   3: E Bad expression: invalid bareword "my_noncool_bin_op"*}

test plugin-2.4 {
    Plugin for late expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc lateExpr {exp info} {
            set res {}
            # Any expression with a "mugg" function has a side effect
            if {[string match "*mugg(*" $exp]} {
                lappend res comment
                lappend res "##nagelfar variable gurka"
            }
            return $res
        }
    } 2
    createTestFile {
        proc tcl::mathfunc::mugg {x} {
            upvar 1 gurka gurka ; set gurka 1 ; return $x
        }
        list $gurka
        set apa [expr {1 + mugg(5)}]
        list $gurka
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   5: E Unknown variable "gurka"}

test plugin-2.5 {
    Plugin for late expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc lateExpr {exp info} {
            # Try to inject code
            set exp [string map {{ eq } { eq [exit 1] + }} $exp]
            return [list replace $exp]
        }
    } 2
    createTestFile {
        set apa [expr {1 eq 1}]
        set apa [expr {1 ne 1}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   2: E Plugin _testfile_.plugin.tcl returned malformed replacement from lateExpr}

test plugin-3.1 {
    Plugin for early expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc earlyExpr {exp info} {
            # Any expression with an "a" in it pre-substitution is ignored
            if {[string match *a* $exp]} {
                return [list replace "1"]
            }
            return ""
        }
    } 2
    createTestFile {
        set apa [expr {1 b 1}]
        set apa [expr {1 b $apa}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   2: E Bad expression: invalid bareword "b"*} -match glob

test plugin-3.2 {
    Plugin for early expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc earlyExpr {exp info} {
            # Any expression with an "eq" in it pre-substitution is a warning
            if {[string match "* eq *" $exp]} {
                return [list warning "Operator \"eq\" is unwanted here"]
            }
            return ""
        }
    } 2
    createTestFile {
        set eq 1
        set apa [expr {$eq ne 1}]
        set apa [expr {$eq eq 1}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   4: W Operator "eq" is unwanted here}

test plugin-3.3 {
    Plugin for early expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc earlyExpr {exp info} {
            # Allow application defined operators
            set exp [string map {{ my_cool_bin_op } { eq }} $exp]
            return [list replace $exp]
        }
    } 2
    createTestFile {
        set apa [expr {1 my_cool_bin_op 1}]
        set apa [expr {1 my_noncool_bin_op 1}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -match glob -result {%%Line   3: E Bad expression: invalid bareword "my_noncool_bin_op"*}

test plugin-3.4 {
    Plugin for early expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc earlyExpr {exp info} {
            set res {}
            # Any expression with a "mugg" function has a side effect
            if {[string match "*mugg(*" $exp]} {
                lappend res comment
                lappend res "##nagelfar variable gurka"
            }
            return $res
        }
    } 2
    createTestFile {
        proc tcl::mathfunc::mugg {x} {
            upvar 1 gurka gurka ; set gurka 1 ; return $x
        }
        list $gurka
        set apa [expr {1 + mugg(5)}]
        list $gurka
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   5: E Unknown variable "gurka"}

test plugin-3.5 {
    Plugin for early expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc earlyExpr {exp info} {
            # Try to inject code, it should not matter
            set exp [string map {{ eq } { eq [exit 1] + }} $exp]
            return [list replace $exp]
        }
    } 2
    createTestFile {
        set apa [expr {1 eq 1}]
        set apa [expr {1 ne 1}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%}

test plugin-3.6 {
    Plugin for early expr check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc earlyExpr {exp info} {
            # Any expression reading $gurka is an error
            if {[string match "*\$gurka*" $exp]} {
                return [list error "Reading \"gurka\" is forbidden here"]
            }
            return ""
        }
    } 2
    createTestFile {
        set gurk 1 ; set gurka 2
        set apa [expr {$gurk ne 1}]
        set apa [expr {$gurka eq 1}]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   4: E Reading "gurka" is forbidden here}

test plugin-4.1 {
    Plugin for raw statement check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc statementRaw {stmt info} {
            set res {}
            # The command "mugg" has a side effect
            if {[string match "mugg *" $stmt]} {
                lappend res comment
                lappend res "##nagelfar variable gurka"
            }
            return $res
        }
    } 2
    createTestFile {
        proc mugg {x} {
            upvar 1 gurka gurka ; set gurka 1 ; return $x
        }
        list $gurka
        set apa [mugg 5]
        list $gurka
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   5: E Unknown variable "gurka"}

test plugin-4.2 {
    Plugin for raw statement check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc statementRaw {stmt info} {
            set res {}
            # We are only interested in calls to "mugg"
            if {![string match "mugg *" $stmt]} {
                return $res
            }
            # The command "mugg" has varying syntax depending on stuff
            # Assume that a mugg call is always a valid list
            if {![string is list $stmt]} {
                lappend res error 
                lappend res "mugg calls should be valid lists"
                return $res
            }
            lappend res comment
            if {[llength $stmt] == 6} {
                lappend res "##nagelfar syntax mugg x x x x x"
            } else {
                lappend res "##nagelfar syntax mugg x"
            }
            return $res
        }
    } 2
    createTestFile {
        set apa [mugg 1]
        set apa [mugg 1 2]
        set apa [mugg 1 2 3 4 5]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   3: E Wrong number of arguments (2) to "mugg"}

test plugin-4.3 {
    Plugin for raw statement check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc statementRaw {stmt info} {
            set res {}
            # The command "mugg" has a known message
            if {[string match "mugg *" $stmt]} {
                lappend res comment
                lappend res "##nagelfar ignore +0 Unknown subcommand"
            }
            return $res
        }
    } 2
    createTestFile {
        ##nagelfar syntax mugg s x*
        ##nagelfar subcmd mugg apa bepa cepa
        mugg depa
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%}

test plugin-5.1 {
    Plugin for words statement check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc statementWords {words info} {
            set res {}
            # The command "mugg" has a side effect
            if {[lindex $words 0] eq "mugg"} {
                lappend res comment
                lappend res "##nagelfar variable gurka"
            }
            return $res
        }
    } 2
    createTestFile {
        proc mugg {x} {
            upvar 1 gurka gurka ; set gurka 1 ; return $x
        }
        list $gurka
        set apa [mugg 5]
        list $gurka
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   5: E Unknown variable "gurka"}

test plugin-5.2 {
    Plugin for words statement check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc statementWords {words info} {
            set res {}
            # We are only interested in calls to "mugg"
            if {[lindex $words 0] ne "mugg"} {
                return $res
            }
            # The command "mugg" has varying syntax depending on stuff
            lappend res comment
            if {[llength $words] == 6} {
                lappend res "##nagelfar syntax mugg x x x x x"
            } else {
                lappend res "##nagelfar syntax mugg x"
            }
            return $res
        }
    } 2
    createTestFile {
        set apa [mugg 1]
        set apa [mugg 1 2]
        set apa [mugg 1 2 3 4 5]
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Line   3: E Wrong number of arguments (2) to "mugg"}

test plugin-5.3 {
    Plugin for words statement check
} -body {
    createTestFile {##Nagelfar Plugin : Some info
        proc statementWords {words info} {
            set res {}
            set firstTwo [join [lrange $words 0 1]]
            # Automatically set the type to avoid the warning
            if {$firstTwo eq "set \$tempArrayName"} {
                lappend res comment
                lappend res "##nagelfar variable tempArrayName varName"
                return $res
            }
            # We are only interested in calls to "set listArgsOptions"
            if {$firstTwo ne "set listArgsOptions"} {
                return $res
            }
            # Find the variables that will be implicitely set
            foreach {_ m} [regexp -all -inline {(\w+)\.arg} [lindex $words 2]] {
                lappend res comment
                lappend res "##nagelfar variable $m"
            }
            return $res
        }
    } 2
    createTestFile {
        ##nagelfar syntax cmdline::getKnownOptions l x x?
        ##nagelfar syntax bar x
        proc foo {args} {
            set listArgsOptions {
                {isValid.arg "" "bla bla" "NO_CUSTOMIZE"}
                {getDefaultValue.arg "" "bla bla" "NO_CUSTOMIZE"}
            }

            array set listargsParams [::cmdline::getKnownOptions args $listArgsOptions]
            foreach tempArrayName [array names listargsParams] {
                set $tempArrayName $listargsParams($tempArrayName)
            }

            if {$isValid} {
                return [bar $getDefaultValue]
            } else {
                return 0
            }
        }
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%}

test plugin-6.1 {
    Plugin finalize
} -body {
    createTestFile {##Nagelfar Plugin : Create a call graph
        proc statementWords {words info} {
            set caller [dict get $info caller]
            set callee [lindex $words 0]
            if {$caller ne "" && $callee ne ""} {
                array set ::callGraph [list "$caller -> $callee" 1]
            }
            return
        }
        proc finalizePlugin {} {
            foreach item [lsort -dictionary [array names ::callGraph]] {
                puts "Call: $item"
            }
            return
        }
    } 2
    createTestFile {
        proc mugg {x} {
            hugg $x
        }
        proc hugg {x} {
            mugg $x
            lindex $x 0
        }
    }

    execTestFile -plugin _testfile_.plugin.tcl
} -result {%%Call: hugg -> lindex
Call: hugg -> mugg
Call: mugg -> hugg}
