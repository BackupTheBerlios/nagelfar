<ul>Code Coverage</ul>

Nagelfar has support for doing simple code coverage analysis.


Instrument each file:
nagelfar.tcl -instrument apa.tcl

That creates apa.tcl_i

Make your tests run the instrumented file.  If a file is sourced from an
instrumented file, an instrumented version will be read if it exists.  Thus
you only need to adjust the top file being called from the test.

The source under test must terminate using the "exit" command.  The
instrumentation uses the exit command to produce the result, thus it needs
to be called to work as expected.

Running tests creates apa.tcl_log.
Coverage data is accumulated in the log file so multiple tests can
be run.  Make sure the log file is deleted before a rerun.

Create a markup file for displaying result:
nagelfar.tcl -markup apa.tcl

This creates apa.tcl_m. The markup file contains asterisks in blocks
that were not run.

Compare original with markup:

eskil -noparse apa.tcl apa.tcl_m


<ul>Example</ul>

Nagelfar's testsuite has code like this to automatically run the
instrumented file:
    set file nagelfar.tcl
    if {[file exists ${file}_i]} {
        set file ${file}_i
    }

Below is the makefile lines used by Nagelfar to test itself.

# Source files for code coverage
SRCFILES = nagelfar.tcl
IFILES   = $(SRCFILES:.tcl=.tcl_i)
LOGFILES = $(SRCFILES:.tcl=.tcl_log)
MFILES   = $(SRCFILES:.tcl=.tcl_m)

# Instrument source file for code coverage
%.tcl_i: %.tcl
	@./nagelfar.tcl -instrument $<

# Target to prepare for code coverage run. Makes sure log file is clear.
instrument: $(IFILES)
	@rm -f $(LOGFILES)

# Run tests to create log file.
$(LOGFILES): $(IFILES)
	@./tests/all.tcl $(TESTFLAGS)

# Create markup file for better view of result
%.tcl_m: %.tcl_log 
	@./nagelfar.tcl -markup $*.tcl

# View code coverage result
icheck: $(MFILES)
	@for i in $(SRCFILES) ; do eskil -noparse $$i $${i}_m & done

# Remove code coverage files
clean:
	@rm -f $(LOGFILES) $(IFILES) $(MFILES)
